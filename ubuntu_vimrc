" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

"--------------- Add Vundle Plugin-------------------
" set the runtime path to include Vundle and initialize
 set rtp+=~/.vim/bundle/Vundle.vim
 call vundle#begin()
 " alternatively, pass a path where Vundle should install plugins
 "call vundle#begin('~/some/path/here')

 " let Vundle manage Vundle, required

 " The following are examples of different formats supported.
 " Keep Plugin commands between vundle#begin/end.
 " plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
 Plugin 'VundleVim/Vundle.vim'
 Plugin 'vim-scripts/taglist.vim'
 Plugin 'scrooloose/nerdtree'
 Plugin 'scrooloose/nerdcommenter'
 Plugin 'jistr/vim-nerdtree-tabs'
 Plugin 'kien/ctrlp.vim'
 Plugin 'mileszs/ack.vim'
Plugin 'mattn/emmet-vim'
"Plugin 'msanders/snipmate.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-surround'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-repeat'
Plugin 'scrooloose/syntastic'
Plugin 'vim-scripts/matchit.zip'
Plugin 'powerline/powerline'
Plugin 'othree/xml.vim'
Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'vim-php/tagbar-phpctags.vim'
Plugin 'vim-scripts/TaskList.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/LargeFile'
Plugin 'godlygeek/tabular'
" Track the engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'


"Plugin 'vim-scripts/phpfolding.vim'
"Plugin 'eshion/vim-sync'

" " plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" " Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" " git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
"Plugin 'file:///home/neilzhou/.vim/bundle/nerdtree'
"Plugin 'file:///home/neilzhou/.vim/bundle/vim-nerdtree-tabs'

" " The sparkup vim script is in a subdirectory of this repo called vim.
" " Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" " Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

 " All of your Plugins must be added before the following line
 call vundle#end()            " required
 filetype plugin indent on    " required
 " To ignore plugin indent changes, instead use:
 "filetype plugin on
 "
 " Brief help
 " :PluginList       - lists configured plugins
 " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
 " :PluginSearch foo - searches for foo; append `!` to refresh local cache
 " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
 "
 " see :h vundle for more details or wiki for FAQ
 " Put your non-Plugin stuff after this line
 " ---------------------END of Vundle Plugin Configuration--------------------

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set nobackup		" keep a backup file
"  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

execute pathogen#infect()

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

set tabstop=4
set shiftwidth=4
set nu
colorscheme evening

" Neil added:
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,cp936,gb18030,big5,default,latin1

set expandtab
set showmatch

set cursorline
"--状态行设置--
set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行

let mapleader=","
 " 选中状态下 复制
vnoremap <leader>y "+y
nnoremap <leader>y "+yy
"设置快捷键将系统剪贴板内容粘贴至Vim
nnoremap <Leader>p "+p
"共享剪贴板  
set clipboard+=unnamed 
"自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
      return "\<Right>"
  else
      return a:char
  endif
endfunction
" normal mode下按Alt+Right（右箭头）展示下一个tab
:nnoremap <A-Right> :tabn<CR>
:nnoremap <A-Left> :tabp<CR>
:nnoremap <C-N> :tabnew<CR>
" 保存Ctrl+s
:nnoremap <C-s> :w<CR>
:inoremap <C-s> <Esc>:w<CR>a
" 映射全选ctrl+a
nnoremap <C-A> ggVG$
inoremap <C-A> <Esc>ggVG$
"JSON FORMAT
noremap <leader>jf <Esc>:%!python -m json.tool<CR>
"map tab in insert mode to <leader>tab"
inoremap <leader><leader><tab> <space><space><space><space>
"========================END of common settings==================="


"Settings for NERDTree"
""autocmd vimenter * NERDTree "default automatical open NERDTree when open vim
"automatical open NERDTree when only vim with no file
""autocmd StdinReadPre * let s:std_in=1
""autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Settings for taglist
"let Tlist_Use_Right_Window=1 "让taglist窗口出现在Vim的右边
"let Tlist_File_Fold_Auto_Close=1 "当同时显示多个文件中的tag时，设置为1，可使 taglist只显示当前文件tag，其它文件的tag都被折叠起来。
"let Tlist_Show_One_File=1 "只显示一个文件中的tag，默认为显示多个
"let Tlist_Sort_Type='name' "Tag的排序规则，以名字排序。默认是以在文件中出现 的顺序排序
"let Tlist_GainFocus_On_ToggleOpen=1 "Taglist窗口打开时，立刻切换为有焦点状态
"let Tlist_Exit_OnlyWindow=1 "如果taglist窗口是最后一个窗口，则退出vim
"let Tlist_WinWidth=32 "设置窗体宽度为32，可以根据自己喜好设置
"let Tlist_Ctags_Cmd='/usr/bin/ctags'  " 注意路径不能有空格
"
"map <leader>t :TlistToggle<CR> "热键设置，我设置成Leader+t来呼出和关闭Taglist 

" Settings for ag
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" settings for ctags
" 在项目目录中新建一个vimscript
" 目录，制定tags路径，可以通过下面配置加载vimscript文件。
if executable('ctags')
"    if getfsize("vimscript")>0
"        source vimscript
"    endif
    " 按下Ctrl+F12 更新tags，当有代码更新的时候。
    nnoremap <C-F12> :!ctags -R<CR>
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
"  set csprg=/usr/bin/cscope
  set csprg=/usr/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
  let g:CurrentDir = getcwd()
  "for windows
  "let g:CscopeAddString = "cs add " . g:CurrentDir . "\\cscope.out " . g:CurrentDir
  "for linux:
  let g:CscopeAddString = "cs add " . g:CurrentDir . "/cscope.out " . g:CurrentDir
  nnoremap <leader><F5> :!find . -type f -name "*.php" > cscope.files<CR>:!ctags -L cscope.files<CR>:!cscope -b<CR>:cs kill -1<CR>:exe CscopeAddString<CR><CR>
endif

"show results of cscope using quickfix window, which you can type :cw to view quickfix window and Ctrl+^ to view original place of codes
set cscopequickfix=s-,c-,d-,i-,t-,e-

nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR>

"Settings for snipmate
let g:snips_author = 'Neil.zhou'

"Settigns for syntastic"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"Settings for airline"
"Automatically displays all buffers when there's only one tab open.
""let g:airline#extensions#tabline#buffer_idx_mode = 1
""let g:airline#extensions#tabline#enabled = 1
""let g:airline#extensions#tabline#left_sep = ' '
""let g:airline#extensions#tabline#left_alt_sep = '|'
""nmap <leader>1 <Plug>AirlineSelectTab1
""nmap <leader>2 <Plug>AirlineSelectTab2
""nmap <leader>3 <Plug>AirlineSelectTab3

"powerline
"let g:airline_powerline_fonts = 1
"powerline{
 set guifont=PowerlineSymbols\ for\ Powerline
" set nocompatible
 set t_Co=256
 let g:Powerline_symbols = 'fancy'
 "}
 "Settings for phpctags
 let g:tagbar_phpctags_bin='/usr/share/php5/phpctags'
"The amount of memory that phpctags can use can be configured as such:
let g:tagbar_phpctags_memory_limit = '512M' 

"Settings for tagbar"
let g:tagbar_autofocus = 1
nnoremap <F3> :TagbarToggle<CR>

"Settings for tasklist
"tasklist{
map <leader>td <Plug>TaskList
"}

"Settings for largefile , 默认单位是 MB
let g:LargeFile = 10

"Settings for Ultisnips
"Ultisnips{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<leader><tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-j>"
"let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"}

"supertab {
let g:SuperTabDefaultCompletionType="<C-Tab>"
"}"
